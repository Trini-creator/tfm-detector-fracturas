# -*- coding: utf-8 -*-
"""streamlit-app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HO60ABvYDZpVrPKJ6JkLRnbNniTMDp-Y
"""

import os
import numpy as np
from PIL import Image
import streamlit as st

# --- Carga robusta del modelo (.keras de Keras 3 o modelos tf.keras) ---
MODEL_PATH = "fracture_detection_model.keras"

@st.cache_resource(show_spinner=False)
def load_model_robust():
    # 1) Intento con Keras 3 (formato .keras / saved Keras v3)
    try:
        import keras
        model = keras.saving.load_model(MODEL_PATH)
        backend = "keras3"
        return model, backend
    except Exception as e_keras3:
        # 2) Fallback a tf.keras (H5/SavedModel clásicos)
        try:
            from tensorflow.keras.models import load_model
            model = load_model(MODEL_PATH, compile=False)
            backend = "tf.keras"
            return model, backend
        except Exception as e_tf:
            raise RuntimeError(
                f"No pude cargar el modelo. "
                f"Keras3 error: {e_keras3}\nTF.Keras error: {e_tf}\n"
                f"¿Seguro que el archivo '{MODEL_PATH}' está en la raíz y es el mismo formato con el que lo guardaste?"
            )

model, backend = load_model_robust()

# --- Preprocesado MobileNetV2 ---
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input as mobilenet_v2_preprocess

IMG_SIZE = (224, 224)

st.set_page_config(page_title="Detector de fracturas", layout="centered")
st.title("Detector de fracturas (Rayos X)")
st.caption(f"Modelo cargado con: **{backend}**")

uploaded = st.file_uploader("Sube una imagen (PNG/JPG)", type=["png", "jpg", "jpeg"])

def prepare(img_pil: Image.Image) -> np.ndarray:
    # Convertir a RGB, redimensionar, a array y preprocesar
    img = img_pil.convert("RGB").resize(IMG_SIZE)
    arr = np.array(img, dtype=np.float32)
    arr = mobilenet_v2_preprocess(arr)  # escala y normaliza como espera MobileNetV2
    arr = np.expand_dims(arr, axis=0)   # batch de 1
    return arr

if uploaded:
    img = Image.open(uploaded)
    st.image(img, caption="Imagen subida", use_column_width=True)

    if st.button("Predecir"):
        with st.spinner("Analizando..."):
            x = prepare(img)
            preds = model.predict(x)
            # Supongo 2 clases: [no fractura, fractura]
            # Si tu entrenamiento tiene otro orden, invierte el argmax o reetiqueta aquí:
            idx = int(np.argmax(preds, axis=1)[0])
            prob = float(np.max(preds, axis=1)[0])

        labels = ["No fractura", "Fractura"]
        st.subheader(f"Resultado: {labels[idx]}")
        st.write(f"Confianza: {prob:.2%}")