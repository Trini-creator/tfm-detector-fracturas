{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMLQycRYdKnfEqqvLLAvgvE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"UFjPFnfFeWS1"},"outputs":[],"source":[]},{"cell_type":"code","source":["%%writefile app.py\n","# ==========================================================\n","# CÓDIGO FINAL Y CORREGIDO PARA app.py\n","# ==========================================================\n","\n","# 1. IMPORTACIONES\n","import streamlit as st\n","from PIL import Image\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","import io\n","\n","# --- Configuración de la Página ---\n","st.set_page_config(\n","    page_title=\"Detector de Fracturas\",\n","    page_icon=\"🦴\",\n","    layout=\"centered\"\n",")\n","\n","st.title(\"Sistema de Detección de Fracturas Óseas\")\n","\n","# --- FUNCIONES DE MACHINE LEARNING ---\n","\n","@st.cache_resource\n","def load_keras_model():\n","    \"\"\"Carga el modelo Keras desde el disco.\"\"\"\n","    try:\n","        model_path = '/content/drive/MyDrive/ColabNotebooks/TFM/fracture_detection_model/fracture_detection_model.keras'\n","        model = tf.keras.models.load_model(model_path)\n","        print(\"Modelo Keras cargado exitosamente.\")\n","        return model\n","    except Exception as e:\n","        st.error(f\"Error crítico al cargar el modelo: {e}\")\n","        return None\n","\n","def preprocess_image_from_pil(pil_image, target_size=(224, 224)):\n","    img = pil_image.resize(target_size).convert('RGB')\n","    img_array = image.img_to_array(img)\n","    img_array = np.expand_dims(img_array, axis=0) / 255.0\n","    return img_array\n","\n","def classify_image(preprocessed, model):\n","    class_indices = {'fractured': 0, 'not fractured': 1}\n","    prediction = model.predict(preprocessed)[0][0]\n","    idx_to_class = {v: k for k, v in class_indices.items()}\n","    return idx_to_class.get(1 if prediction > 0.5 else 0, \"Unknown\")\n","\n","def make_gradcam_heatmap(img_array, model, last_conv_layer_name=\"block_16_project\"):\n","    grad_model = tf.keras.models.Model([model.inputs], [model.get_layer(last_conv_layer_name).output, model.output])\n","    with tf.GradientTape() as tape:\n","       conv_outputs, predictions = grad_model(img_array)\n","       loss = predictions[:, 0]\n","    grads = tape.gradient(loss, conv_outputs)\n","    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n","    heatmap = conv_outputs[0] @ pooled_grads[..., tf.newaxis]\n","    heatmap = tf.squeeze(heatmap)\n","    return tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)\n","\n","# --- CORRECCIÓN DEL NameError ---\n","# El argumento se llama 'original_pil', así que usamos ese nombre dentro de la función.\n","def get_gradcam_image(original_pil, preprocessed_img, model):\n","    heatmap = make_gradcam_heatmap(preprocessed_img, model)\n","    img_array = image.img_to_array(original_pil) # <-- Usamos 'original_pil'\n","    heatmap = np.uint8(255 * heatmap)\n","    jet = plt.colormaps.get_cmap(\"jet\")\n","    jet_colors = jet(np.arange(256))[:, :3]\n","    jet_heatmap = image.array_to_img(jet_colors[heatmap]).resize((img_array.shape[1], img_array.shape[0]))\n","    superimposed_img = Image.fromarray(np.clip((image.img_to_array(jet_heatmap) * 0.4) + img_array, 0, 255).astype(np.uint8))\n","    return superimposed_img\n","\n","\n","# --- Lógica de la Interfaz de Usuario ---\n","\n","model = load_keras_model()\n","\n","if model:\n","    uploaded_file = st.file_uploader(\n","        \"Sube una radiografía para analizar\", type=[\"png\", \"jpg\", \"jpeg\"]\n","    )\n","\n","    if uploaded_file is not None:\n","        original_image = Image.open(uploaded_file)\n","        # --- CORRECCIÓN DE LA ADVERTENCIA ---\n","        # Cambiamos use_column_width a use_container_width\n","        st.image(original_image, caption=\"Imagen Subida\", use_container_width=True)\n","\n","        if st.button(\"Analizar Imagen\"):\n","            with st.spinner('Procesando...'):\n","                preprocessed_image = preprocess_image_from_pil(original_image)\n","                prediction = classify_image(preprocessed_image, model)\n","                gradcam_result_image = get_gradcam_image(original_image, preprocessed_image, model)\n","\n","                st.success(f\"**Predicción del Modelo:** {prediction}\")\n","                # --- CORRECCIÓN DE LA ADVERTENCIA ---\n","                st.image(gradcam_result_image, caption=\"Análisis con Grad-CAM\", use_container_width=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"snp39K9YRVI7","executionInfo":{"status":"ok","timestamp":1755239101316,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mari Trini Cortina Balaguer","userId":"11602349400737384633"}},"outputId":"d6abf3bc-9ec6-476a-aeb0-58dc0c2f3191"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting app.py\n"]}]}]}